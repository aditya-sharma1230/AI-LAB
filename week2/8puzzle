
goal = [[1,2,3],
        [4,5,6],
        [7,8,0]]


moves = [(1,0),(-1,0),(0,1),(0,-1)]

def misplaced_tiles(state):
    """Heuristic: number of misplaced tiles"""
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal[i][j]:
                count += 1
    return count

def manhattan_distance(state):
    """Heuristic: Manhattan distance"""
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(state[i][j]-1, 3)
                distance += abs(x-i) + abs(y-j)
    return distance

def get_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def neighbors(state):
    x, y = get_blank(state)
    for dx, dy in moves:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            yield new_state

def ida_star(start, heuristic):
    threshold = heuristic(start)
    
    def search(path, g, threshold):
        node = path[-1]
        f = g + heuristic(node)
        if f > threshold:
            return f
        if node == goal:
            return "FOUND"
        minimum = float("inf")
        for nxt in neighbors(node):
            if nxt not in path:
                path.append(nxt)
                t = search(path, g+1, threshold)
                if t == "FOUND":
                    return "FOUND"
                if t < minimum:
                    minimum = t
                path.pop()
        return minimum
    
    path = [start]
    while True:
        t = search(path, 0, threshold)
        if t == "FOUND":
            return path
        if t == float("inf"):
            return None
        threshold = t



print("Enter the 8-puzzle initial state row by row (use 0 for blank):")
start = []
for i in range(3):
    row = list(map(int, input(f"Row {i+1}: ").split()))
    start.append(row)

print("\nChoose heuristic:")
print("1. Misplaced Tiles")
print("2. Manhattan Distance")
choice = int(input("Enter choice (1/2): "))

heuristic = misplaced_tiles if choice == 1 else manhattan_distance

solution = ida_star(start, heuristic)

if solution:
    print("\nSolution found!\n")
    step = 0
    for s in solution:
        print(f"Step {step}:")
        for row in s:
            print(row)
        print()
        step += 1
else:
    print("No solution found (this puzzle may be unsolvable).")
