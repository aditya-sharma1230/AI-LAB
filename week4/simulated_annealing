import math
import random

# Generate a random board state
def random_state(n):
    return [random.randint(0, n - 1) for _ in range(n)]

# Heuristic: number of pairs of queens attacking each other
def heuristic(state):
    conflicts = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                conflicts += 1
    return conflicts

# Print the board nicely
def print_board(state):
    n = len(state)
    for row in range(n):
        line = ""
        for col in range(n):
            if state[col] == row:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

# Simulated Annealing
def simulated_annealing(n=4, initial_temp=100, cooling_rate=0.95, min_temp=1e-3):
    current = random_state(n)
    current_h = heuristic(current)
    temp = initial_temp

    while temp > min_temp and current_h > 0:
        col = random.randint(0, n - 1)
        new_row = random.randint(0, n - 1)
        while new_row == current[col]:
            new_row = random.randint(0, n - 1)

        neighbor = current.copy()
        neighbor[col] = new_row
        neighbor_h = heuristic(neighbor)

        delta_e = current_h - neighbor_h

        if delta_e > 0:
            current = neighbor
            current_h = neighbor_h
        else:
            probability = math.exp(delta_e / temp)
            if random.random() < probability:
                current = neighbor
                current_h = neighbor_h

        temp *= cooling_rate

    return current, current_h

# Run the algorithm
solution, cost = simulated_annealing()
print("Simulated Annealing Solution:")
print_board(solution)
print("Heuristic Cost:", cost)
